package com.mama.jedis.service.facade.redis;

import java.util.Arrays;
import java.util.List;

import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.JedisShardInfo;
import redis.clients.jedis.ShardedJedis;
import redis.clients.jedis.ShardedJedisPool;

public class RedisFactory {
	
	
    private List<String> host;//redis服务器
    private long maxWaitMillis;
    private int maxIdle;
    private Boolean testOnBorrow;
    private int timeOut;//超时时长
    private static List<JedisShardInfo> shards ;
    private static ShardedJedisPool pool;
    private static ShardedJedis jedis;
    
    public RedisFactory(List<String> host, long maxWaitMillis, int maxIdle,Boolean testOnBorrow,String pass ,int timeOut) {
        this.host = host;
        this.maxWaitMillis = maxWaitMillis;
        this.maxIdle = maxIdle;
        this.testOnBorrow = testOnBorrow;
        this.timeOut      = timeOut;
        if(host.size()!=0){
            for (int i = 0; i < host.size(); i++) {        
                String h[] = ((String) this.host.get(i)).split(":");     
                shards = Arrays.asList(new JedisShardInfo(h[0].trim(),Integer.parseInt(h[1].trim())));
            }
        }else{
            System.out.println("请检查Redis配置，host项为必填项！格式[IP:PORT]");
        }
     
        for(int i=0;i<shards.size();i++){
        	JedisShardInfo info = shards.get(i);
        	info.setPassword(pass);
        	info.setConnectionTimeout(timeOut);
        }
        JedisPoolConfig poolConfig = new JedisPoolConfig();
        poolConfig.setMaxIdle(maxIdle);
        poolConfig.setMaxWaitMillis(maxWaitMillis);
        pool = new ShardedJedisPool( poolConfig , shards );
        jedis = pool.getResource(); 
        
    }
    
    public synchronized ShardedJedis getSingletonInstance(){
        return jedis;
    }
    
    public synchronized static void returnResource(){
        pool.returnResource(jedis);
    }
    
    public synchronized static void destroy(){
        pool.destroy();
    }


}
